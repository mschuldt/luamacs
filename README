[[ most tests currently failing ]]

Luamacs -- Emacs with Lua

Luamacs is is a result of merging the Emacs-lisp and Lua interpreters.
Each of the interpreters can lookup values and call functions
the from the other one.
They have each been extended with a new data type that allows them to
store references to each others values even if they can not themselves
operate on them.


Quick demo:

;;create lua function that prints a tables field:
(lua-eval "function ff(x) 
              return x.val
            end")

;;define a lua table
(lua-eval "tbl = {val = 'lua string'}")

;;store the lua table in an e-lisp var
(setq z lua.tbl)
==> #<Lua ref>

;; call the lua function from emacs 
(lua.ff z) 
==> "lua string"

;; or refer to the table stored in emacs
(lua-eval "v = ff(emacs.z)")

;; then reference it from emacs:
(concat lua.v " + emacs string")
==> "lua string + emacs string"

;;referencing non-valid lisp names from lua:
(setq +illegal-var?! "does it work?")
(lua-eval "ok = emacs['+illegal-var?!'] .. ' YES!'")
lua.ok
==> "does it work? YES!"

;;storing Lisp_Objects in lua:
(setq this_buff (current-buffer))
(lua-eval "b = emacs.this_buff")
(buffer-name lua.b)
==> "*scratch*"

